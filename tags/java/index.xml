<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on fzyho的小站</title>
    <link>https://fzyho.github.io/tags/java/</link>
    <description>Recent content in java on fzyho的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-ch</language>
    <lastBuildDate>Mon, 09 Jan 2023 21:41:47 +0800</lastBuildDate><atom:link href="https://fzyho.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mock相关概念</title>
      <link>https://fzyho.github.io/docs/jmockit/mock%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 19 Jan 2020 21:04:11 +0900</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/mock%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</guid>
      <description>在讲解JMockit的使用之前，笔者想先简单描述一些与Mock相关的概念和定义，以便后面更好的进行讲解叙述。
Test Doubles 在自动化测试或者进行单元测试中，我们常常希望能够将某个模块隔离解耦出来，单独地进行测试。如此我们可以降低测试用例构建的难度和复杂度，并且无需担心测试的模块会受到系统其他模块的影响。为此，我们就需要构建一些行为与实际生产环境类似的简化的对象。Gerard Meszaros在其著作《xUnit Test Patterns: Refactoring Test Code》将此类对象用一个概括性的通用术语表示——Test Doubles(此术语源于stunt double，特技替身演员)：
When we are writing a test in which we cannot (or chose not to) use a real depended-on component (DOC), we can replace it with a Test Double. The Test Double doesn&amp;rsquo;t have to behave exactly like the real DOC; it merely has to provide the same API as the real one so that the SUT thinks it is the real one!</description>
    </item>
    
    <item>
      <title>库API使用</title>
      <link>https://fzyho.github.io/docs/jmockit/usage/</link>
      <pubDate>Sun, 19 Jan 2020 21:04:11 +0900</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/usage/</guid>
      <description>This is a JMockit User Guide.</description>
    </item>
    
    <item>
      <title>综合运用</title>
      <link>https://fzyho.github.io/docs/jmockit/application/</link>
      <pubDate>Sun, 19 Jan 2020 21:04:11 +0900</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/application/</guid>
      <description>This is a JMockit User</description>
    </item>
    
    <item>
      <title>JMockit使用指南(二)</title>
      <link>https://fzyho.github.io/posts/jmockit%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%BA%8C/</link>
      <pubDate>Mon, 09 Jan 2023 21:41:47 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/jmockit%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%BA%8C/</guid>
      <description>前面我们提到Record-Replay-Verify模型，在JMockit中，Expectations{}则是用于录制(Record)。
Record(录制) 录制类/对象的调用 Expectations代码块中，可以让特定方法调用(实例方法、静态方法皆可)输出指定的结果，而不用走原本方法内部的逻辑，并且可以指定只有当输入特定(范围)的参数时，才输出特定结果。需要注意的是，Expectations只能够改写非private且非static的非构造函数的方法。如果要仿造构造方法/静态方法，可以使用MockUp。
1 2 3 4 5 6 7 8 9 10 @Test void testExample(@Mocked Example mockInstance) { new Expectations() {{ mockInstance.sayHello(1, &amp;#34;test&amp;#34;); result = &amp;#34;mocked&amp;#34;; }}; Assert.assertSame(mockInstance.sayHello(1,&amp;#34;test&amp;#34;), &amp;#34;mocked&amp;#34;); Assert.assertNotSame(mockInstance.sayHello(2,&amp;#34;test&amp;#34;), &amp;#34;mocked&amp;#34;); } 如上，在Expectations代码块中指定当sayHello方法被调用且参数为1, &amp;quot;test&amp;quot;时，直接返回结果&amp;quot;mocked&amp;quot;。而参数为其他值是，走原本的方法逻辑返回结果。
除了上述代码例子，Expectations是配合Mock实例对象(@Mocked/@Injectable/@Capturing)进行录制的。Mock对象是对方法和字段都进行mock了。但某些情况我们需要使用真实的实例，但只需要对部分方法进行结果返回修改。此时可以使用Expectations(Object... )构造函数，指定对象修改其方法。
如下代码例子，向Expectations()构造函数中传入参数Example实例对象example1以及OtherExample类，并改写sayHello()方法。可以看到Example对象的sayHello方法分别返回了不同的值，而OtherExample对象的sayHello方法则返回相同结果。另外，Expectations构造函数传入的参数并没有example2，但Expectations代码块中有Mockexample2的实例方法，并且也生效了。这是因为构造函数参数只会区分是是类定义还是类实例，若是类定义则会整个类方法生效，若是类实例，则只会对代码块中mock的实例方法生效。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Test public void testExample2() { Example example1 = new Example(); Example example2 = new Example(); OtherExample otherExample1 = new OtherExample(); OtherExample otherExample2 = new OtherExample(); new Expectations(example1, OtherExample.</description>
    </item>
    
    <item>
      <title>JMockit使用指南(一)</title>
      <link>https://fzyho.github.io/posts/jmockit%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%B8%80/</link>
      <pubDate>Mon, 19 Dec 2022 22:01:47 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/jmockit%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%B8%80/</guid>
      <description>开发者在实现了需求功能或者完成了某个模块后，时常需要对模块整体功能或者某些关键逻辑进行单元测试(Unit Test)以验证程序运行是否符合预期。而在运行程序时，程序不可避免的可能需要调用第三方库、连接网络、数据库等，需要依赖许多不同的外部模块。但这些可能在开发过程中未真正接入或者不可用。这时就需要将我们的测试从实际的运行环境中隔离开来(Test Isolation)。而Jmockit则是为解决这类问题而诞生的。
Jmockit是一个对类或对象进行Mock的工具，它必须运行在JUnit或者TestNG框架中。
This is a JMockit User Guide. Since the official guide is a bit obscure, I transalate and rearrange the content of it and hope it could be clearer and more heplful for readers.
相关概念 在讲解JMockit的使用之前，笔者想先简单描述一些与Mock相关的概念和定义，以便后面更好的进行讲解叙述。
Test Doubles 在自动化测试或者进行单元测试中，我们常常希望能够将某个模块隔离解耦出来，单独地进行测试。如此我们可以降低测试用例构建的难度和复杂度，并且无需担心测试的模块会受到系统其他模块的影响。为此，我们就需要构建一些行为与实际生产环境类似的简化的对象。Gerard Meszaros在其著作《xUnit Test Patterns: Refactoring Test Code》将此类对象用一个概括性的通用术语表示——Test Doubles(此术语源于stunt double，特技替身演员)：
When we are writing a test in which we cannot (or chose not to) use a real depended-on component (DOC), we can replace it with a Test Double.</description>
    </item>
    
    <item>
      <title>Netty浅析小记</title>
      <link>https://fzyho.github.io/posts/netty%E6%B5%85%E6%9E%90%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Thu, 18 Aug 2022 12:41:22 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/netty%E6%B5%85%E6%9E%90%E5%B0%8F%E8%AE%B0/</guid>
      <description>Netty是使用Java编写的一个网络编程框架。直至目前，可以说Netty是Java网络编程的主流选择，其在各种业务场景，如直播、社交、游戏、电商等领域都有广泛应用。笔者在工作中也不可避免的经常与其打交道。以下便是笔者对Netty的一些特点的小记。这些特点并不是Netty独有的，只是笔者个人觉得它们或者是重要的地基，或者是有趣的设计，故而在此进行分析记录。
1、处理模型 Netty使用的是主从Reactor模型。bossGroup负责处理Accept事件，workerGroup负责处理Read/Write事件。ChannelPipeline是一个双向的链表，里面存放着各种ChannelHandler。
当收到事件，触发pipeline时，pipeline会按顺序根据事件调用ChannelHandler的相关方法。一次pipeline的所有ChannelHandler调用都是在一个eventGroup的同一个evenLoop线程中执行。由于单线程处理，不存在线程上下文切换，也无需对ChannelHandler的处理加锁，
因此纵使在海量请求处理的情况下也能保证高效的性能。但是也是由于单线程，一旦某个ChannelHandler的执行出现阻塞，所在的evenLoop线程的所有pipeline事件处理都会被卡住。因此，在实际的使用场景中，eventLoop应该只做事件消息相关操作(比如编/解码，加/解密等)，业务相关的逻辑在额外的业务线程池中进行处理。这也就是许多高性能的分布式框架(比如Dubbo Kafka等)都会使用的三层处理模型。
2、内存优化 Netty作为一款高性能的网络编程框架，能承受千万甚至上亿的流量挑战，也体现出了其内部的优秀的内存管理和优化设计。
2.1 单例与@Sharable 当客户端与服务器建立起一个连接，便会在Netty中生成一个包含连接信息的Channel对象。每个Channel都有自己的ChannelPipeline，而每个ChannelPipeline也都有持有着一系列的ChannelHandler。
因此当有大量连接建立时，服务端便会持有大量的ChannelHandler；当连接频繁建立、断开时，JVM的新生代也可能会因内存不足而频繁GC。因此对于ChannelHandler应该要尽量做到复用。对于一些无状态的ChannelHandler，Netty提供了@Sharable注解，以表示此ChannelHandler可以被所有ChannelPipeline共享。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @Override protected void initChannel(Channel ch) throws Exception { ch.pipeline().addLast(&amp;#34;encoder&amp;#34;, ServerMessageEncoder.INSTANCE); ch.pipeline().addLast(&amp;#34;decoder&amp;#34;, new ServerMessageDecoder(...)); ch.pipeline().addLast(&amp;#34;handler&amp;#34;, ServerMessageHandler.INSTANCE); } @Sharable class ServerMessageEncoder { public static final ServerMessageEncoder INSTANCE = new ServerMessageEncoder(); // some code ... } @Sharable class ServerMessageHandler { public static final ServerMessageHandler INSTANCE = new ServerMessageHandler(); // some code .</description>
    </item>
    
    <item>
      <title>垃圾收集器-CMS和G1</title>
      <link>https://fzyho.github.io/posts/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8-cms%E5%92%8Cg1/</link>
      <pubDate>Mon, 13 Sep 2021 23:11:47 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8-cms%E5%92%8Cg1/</guid>
      <description>CMS收集器 CMS收集器有三个基本操作：
对新生代的对象进行回收(STOP-THE-WORLD) 启动一个并发线程对老年代空间的垃圾进行回收 如若必要，CMS会发起FullGC JVM会根据堆的使用情况启动并发回收。当堆的占用达到某个程度时，JVM会启动后台线程扫描堆，回收不用的数据。需要注意的是，使用CMS回收器，老年代空间不会进行压缩整理——老年代空间由已分配对象的空间和空闲空间组成。
CMS的回收过程 CMS的回收过程分为好几个阶段，虽然主要的并发回收(Concurrent Cycle)阶段是使用后台线程工作的，但有些阶段还是会暂停所有的应用线程，因此会引入短暂的停顿。
初始标记 并发回收有“初始标记”阶段开始，这个阶段会暂停所有的应用程序线程。此阶段的主要任务就是找到堆中所有的垃圾回收根节点对象。
// 对象占用了老年代空间(1398MB)中的702MB，堆的大小为2027MB，其中772MB被占用。// 应用线程在CMS回收周期中被暂停了0.08s89.876: [GC [1 CMS-initial-mark: 702254K(1398144K)772530K(2027264K), 0.0830120 secs] [Times: user=0.08 sts=0.00, real=0.08 secs] 标记阶段 此阶段进行时，应用线程也可以同步持续运行，不会被中断。由于此阶段的工作只是标记，不会对堆的使用有实质的影响，所以GC日志不会有没有相关的数据输出。若此阶段还有数据输出，很可能是由于0.83s内新生代对象的分配导致的堆增长。
// 标记阶段好事0.83s(以及1.11s的CPU时间)。90.059: [CMS-concurrent-mark-start]90.887: [CMS-concurrent-mark: 0.823/0.828 secs][Times: user=1.11 sys=0.00, real=0.83 secs] 预清理 此阶段也是与应用线程的运行并发进行的。
90.887: [CMS-concurrent-preclean-start]90.892: [CMS-concurrent-preclean: 0.005/0.005 secs][Times: user=0.01 sys=0.00, real=0.01 secs] 重新标记 此阶段涵盖了多个操作：
90.892: [CMS-concurrent-abortable-preclean-start]92.382: [GC 92.393: ParNew: 629120K-&amp;gt;69888K(629120K), 0.1289040 secs]1331374K-&amp;gt;803967K(2027264K), 0.1290200 secs][Times: user=0.</description>
    </item>
    
    <item>
      <title>Expectations</title>
      <link>https://fzyho.github.io/docs/jmockit/usage/expectations/</link>
      <pubDate>Fri, 02 Apr 2021 17:57:05 +0800</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/usage/expectations/</guid>
      <description>前面我们提到Record-Replay-Verify模型，在JMockit中，Expectations{}则是用于录制(Record)。
Record(录制) 录制类/对象的调用 Expectations代码块中，可以让特定方法调用(实例方法、静态方法皆可)输出指定的结果，而不用走原本方法内部的逻辑，并且可以指定只有当输入特定(范围)的参数时，才输出特定结果。需要注意的是，Expectations只能够改写非private且非static的非构造函数的方法。如果要仿造构造方法/静态方法，可以使用MockUp。
1 2 3 4 5 6 7 8 9 10 @Test void testExample(@Mocked Example mockInstance) { new Expectations() {{ mockInstance.sayHello(1, &amp;#34;test&amp;#34;); result = &amp;#34;mocked&amp;#34;; }}; Assert.assertSame(mockInstance.sayHello(1,&amp;#34;test&amp;#34;), &amp;#34;mocked&amp;#34;); Assert.assertNotSame(mockInstance.sayHello(2,&amp;#34;test&amp;#34;), &amp;#34;mocked&amp;#34;); } 如上，在Expectations代码块中指定当sayHello方法被调用且参数为1, &amp;quot;test&amp;quot;时，直接返回结果&amp;quot;mocked&amp;quot;。而参数为其他值是，走原本的方法逻辑返回结果。
除了上述代码例子，Expectations是配合Mock实例对象(@Mocked/@Injectable/@Capturing)进行录制的。Mock对象是对方法和字段都进行mock了。但某些情况我们需要使用真实的实例，但只需要对部分方法进行结果返回修改。此时可以使用Expectations(Object... )构造函数，指定对象修改其方法。
如下代码例子，向Expectations()构造函数中传入参数Example实例对象example1以及OtherExample类，并改写sayHello()方法。可以看到Example对象的sayHello方法分别返回了不同的值，而OtherExample对象的sayHello方法则返回相同结果。另外，Expectations构造函数传入的参数并没有example2，但Expectations代码块中有Mockexample2的实例方法，并且也生效了。这是因为构造函数参数只会区分是是类定义还是类实例，若是类定义则会整个类方法生效，若是类实例，则只会对代码块中mock的实例方法生效。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Test public void testExample2() { Example example1 = new Example(); Example example2 = new Example(); OtherExample otherExample1 = new OtherExample(); OtherExample otherExample2 = new OtherExample(); new Expectations(example1, OtherExample.</description>
    </item>
    
    <item>
      <title>Verifications</title>
      <link>https://fzyho.github.io/docs/jmockit/usage/verifications/</link>
      <pubDate>Fri, 02 Apr 2021 17:57:05 +0800</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/usage/verifications/</guid>
      <description>Verifications Verifications{}代码块可用于验证Mock对象调用某个方法的情况是否符合预期——调用了多少次，调用该方法调用的参数是否符合预期。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Test public void testExample(@Injectable VerificationExample example) { example.voidMethod(); example.voidMethod(); example.stringReturningMethod() new Verifications() {{ // 没有设定次数时，默认需要调用至少一次 example.voidMethod(); // 1 to 5 invocations are expected: example.stringReturningMethod(); minTimes = 1; maxTimes = 5; result=&amp;#34;Injectable...&amp;#34;; }}; } Verifications类只有公开的一个无参的构造函数，因此只能对@Injectable、@Mocked等Mock出来的类/对象进行验证，而不能像Expectations那样通过传参来进行指定对象方法的验证。不过在实际的程序测试中，我们对于类的某个方法有没调用，调用多少次的测试场景并不是太多；一般都可以通过Assert的方式对程序结果进行验证。
Verifications有三个子类VerificationsInOrder，FullVerifications以及二者的结合FullVerificationsInOrder。
VerificationsInOrder和Verification是相似的，但是加上了方法调用顺序的验证。如下如果在voidMethod方法调用之前调用stringReturningMethod，程序运行就会抛出异常——在调用stringReturningMethod之前Missing invocation(缺少依赖的方法调用)。 如果需要验证有且仅有Verifications()代码块中的仿造对象方法有被调用到，可以使用new FullVerifications() {&amp;hellip;}。如下如果FullVerifications代码块中注释掉example.voidMethod();，程序也会运行失败。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @Test public void testExample(@Injectable VerificationExample example) { example.</description>
    </item>
    
    <item>
      <title>方法参数匹配</title>
      <link>https://fzyho.github.io/docs/jmockit/usage/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Fri, 02 Apr 2021 17:57:05 +0800</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/usage/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%8C%B9%E9%85%8D/</guid>
      <description>Verifications </description>
    </item>
    
    <item>
      <title>从CLH锁聊聊AQS的设计</title>
      <link>https://fzyho.github.io/posts/%E4%BB%8Eclh%E9%94%81%E8%81%8A%E8%81%8Aaqs%E7%9A%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 02 Jan 2021 14:16:15 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/%E4%BB%8Eclh%E9%94%81%E8%81%8A%E8%81%8Aaqs%E7%9A%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>AbstractQueuedSynchronizer，即AQS，是Java并发工具包(JUC)中的锁和同步器(Semophore、CountDownLatch等)的基础。它提供了一个上锁、释放以及锁等待的整体流程框架。AQS是基于一个FIFO的等待队列实现的，它是CLH队列锁(CLH Queuing Lock)的一种变体。因此，秉着从简到深的想法，我们先来了解下CLH队列锁。
1、CLH Lock 1.1 CLH队列锁是什么 CLH队列锁是一种自旋锁。正如名字所描述的，是一种基于队列\链表，通过将线程组织成一个队列的形式来一次进行上锁-处理-释放的同步方式。
在队列中，每个线程通过检测其前驱线程是否已完成(获得并释放锁)来判断是否轮到自己。每个线程在不同的存储单元自旋，从而降低cache一致性流，并提高临界区利用率。最后队列FIFO的特性保证了公平性。
1.2 CLH队列锁工作原理 一开始，CLHLock的队列只有一个尾部节点。然后多线程同时竞争上锁，两线程会调用原子的GetAndSet方法，获取尾部节点，并将此节点设置为自己的前驱节点作为，然后将自己线程转成节点插入队列的尾部。完成这些操作后，便进入自旋状态，直到前驱节点释放锁，即字段locked为false。
如下图，可以看作线程A、B同时竞争获取锁。线程A先插入到队尾并获得锁，线程B在线程A后面，即A是B的前驱节点。线程B会不断自旋，直到前驱结点，即线程A，的状态从locked变为unlock；而后线程B获得锁，线程A从队列中移除。
2、队列同步器(AQS) 2.1 AQS简述 AQS是基于CLHLock的一个拓展实现。其核心思想是：若被请求的资源空闲，则将当前请求资源的线程设为有限线程，并且将资源状态设为锁定。若被请求的资源被占用，则将暂时获得不到锁的线程加入队列中，并将线程挂起(阻塞)等待以及被唤醒时所分配。
AQS实现的CLHLock是一个双向队列。AQS将每条请求共享资源的线程封装成一个CLHLock队列的节点(Node)来实现所分配，并使用字段waitStatus来表示资源获得的状态。Node的类定义如下
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 static final class Node { // 表示线程取消等待，不竞争资源的获取 static final int CANCELLED = 1; // 表示获得资源锁了，对应线程无需挂起，需要唤醒 static final int SIGNAL = -1; // 用于表示线程节点在做条件等待 static final int CONDITION = -2; // 表示后续线程/节点在调用acquireShare()方法时可以无条件获得锁 static final int PROPAGATE = -3; // 初始化为0，而后或为上述4中状态值。 volatile int waitStatus; // 前驱节点 volatile Node prev; // 后继节点 volatile Node next; // 节点所代表的线程 volatile Thread thread; // 条件队列所用，表示同一条件等待队列中的下一个等待节点 Node nextWaiter; } 2.</description>
    </item>
    
    <item>
      <title>读书笔记-The Art Of Multiprocessor Programing(四)</title>
      <link>https://fzyho.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-theartofmultiprocessorprograming%E5%9B%9B/</link>
      <pubDate>Sat, 21 Nov 2020 20:51:47 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-theartofmultiprocessorprograming%E5%9B%9B/</guid>
      <description>异步执行、调度和工作分配 1、 2、工作分配 工作分配的一种简单办法就是工作交易(working dealing)：一个超负荷的任务尝试着将任务分给其他的轻负荷的线程来减轻负担。这种做法有一个致命的缺点就是：如果大多数线程都是超负荷的，那么它们将会将时间浪费在交换线程的无用尝试中。因此，我们考虑工作窃取(work stealing)：一个无法工作的线程(空闲)尝试从其他线程中窃取工作。工作窃取的优点之一就是，如果所有的线程都处于忙碌状态，那么他们不必浪费事件去分配任务。
1、工作窃取 每个线程以双端队列(double-ended queue)的形式维护一个等待执行的任务池，该队列提供pushBottom()、popBottom()、popTop()方法(不需要pushTop())。当线程创建一个新任务时，调用pushBottom()方法；当线程需要执行一个任务时，调用popBottom()。而当线程发现它的任务队列为空时，它就变成了一个窃取者：随机选取一个牺牲者(victim)线程，并调用该线程任务队列的popTop()方法窃取任务。 如下是工作窃取的一种简单实现，所有工作线程共享一个DEQueue数组，每个DEQueue对应一个线程。为简化逻辑，这里忽略了窃取时触发异常的可能性。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class WorkStealingThread { DEQueue[] queue; int me; Random random; WorkStealingThread(DEQueue[] queue) { this.queue = queue; this.random = new Random(); } void run() { int me = ThreadID.get(); Runnable task = queue[me].popBottom(); // pop first task while (true) { while (task !</description>
    </item>
    
    <item>
      <title>读书笔记-The Art Of Multiprocessor Programing(三)</title>
      <link>https://fzyho.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-theartofmultiprocessorprograming%E4%B8%89/</link>
      <pubDate>Tue, 11 Aug 2020 13:12:47 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-theartofmultiprocessorprograming%E4%B8%89/</guid>
      <description>并行队列与ABA问题 1、池的定义与形式 池，即为存放东西的一个容器，的作用往往与生产者——消费者缓冲区的作用相同。 池有以下几种不同的变化形式：
池可以是有界或无界的。有界池存放有限个元素，而无限池可以存放任意数量的元素。当需要保持生产者与消费者之间的松弛同步，即生产者不要过快超过消费者时，就要用到有界池。有界池的实现可能要比无限池简单(==并不觉得，反而感觉恰恰相反==)，当不用设定固定的界限来限制生产者与消费者之间的速率时，可以使用无限池。 池的方法可以是完全、部分或者同步的 完全(Total)： 若一个方法的调用不需要等待某个条件成立，则该方法时完全的。例如，一个试图从空池中删除元素的get()调用 或者 往满池中添加元素的set()调用将立刻返回错误码或者抛出一个异常。 部分(Partial)： 若一个方法的调用****需要**等待某个条件成立，则该方法是部分的。例如，空池中删除元素/满池中插入元素 将会阻塞直到满足条件。 同步(synchronous)： 若一个方法需要等待另一个方法与它的调用间隔相重叠，则称该方法是同步的。例如，在一个同步池中，一个向池中添加元素的方法将会被阻塞直到该添加的元素被取走。同样删除元素的调用也会被阻塞直到有元素被添加为止(此方法同时也是部分的)。 2、部分有界队列(An Bounded Partial Queue) 队列本身包含Head和Tail字段。与第九章的链表一样，此处Head和Tail充当哨兵节点——其值是无意义的。而不同的是，第九章的哨兵节点是固定不变的，而这里的队列则是不断地更换哨兵节点。对于enq()和deq()方法，分别使用不同的锁，由此保证入队不会锁住出队。 对于唤醒丢失(lost-wakeup)问题，由于在await之前，已获得condition对应的锁，保证await之前其他线程无法signal，故没有唤醒丢失问题。 有一点需要注意的就是——由于并发操作，Head和Tail字段不一定始终指向头/尾节点。
另外此实现有一个缺点就是并发的enq()和deq()互相干扰，所有方法对size字段调用的getAndIncrement或getAndDecreament比一般的读写开销更大，且能引起顺序瓶颈*==并不明白这话什么意思==* 可以通过将size分成两个计数器——enqSideSize和deqSideSize，enq增1，deq减1。enq()检测enqSideSize&amp;lt;capacity则继续执行；若enqSideSize==capacity则锁住deqLock并将deqSideSize加到enqSideSize中。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class BoundedQueue&amp;lt;T&amp;gt; { private final int capacity; private AtomicInteger size; private volatile Node head, tail; private final ReentrantLock enqLock, deqLock; private final Condition notEmptyCondition, notFullCondition; BoundedQueue(int capacity) { this.</description>
    </item>
    
    <item>
      <title>读书笔记-The Art Of Multiprocessor Programing(二)</title>
      <link>https://fzyho.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-theartofmultiprocessorprograming%E4%BA%8C/</link>
      <pubDate>Wed, 13 May 2020 21:34:47 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-theartofmultiprocessorprograming%E4%BA%8C/</guid>
      <description>链表: 锁的作用 1、锁的类型 粗粒度锁：简单地将逻辑的顺序实现的代码块锁住。 细粒度锁：不再使用单一的锁来解决每次对象存取的同步，而是将对象分解成一些独立的同步组件，并确保只有当多个方法调用试图同时访问同一组件时才发生冲突 乐观同步：在查找时无需获取任何锁，如果找到所需要的部分，则锁住该组件，然后确认组件在被检测和上锁期间没有发生变化。这种方式只在成功次数高于失败次数时才具有价值，故称为乐观。常用于树、链表等数据结构中 惰性同步：有时将较难的工作推迟完成是一种好的处理方式。例如，从一个数据结构中删除某个部分的数据可以分成两个阶段——通过设置标志位来逻辑删除此部分，然后再通过数据结构卸载这部分来物理删除它。 非阻塞同步：完全消除锁，利用类似于compareAndSet()的内置原子操作来进行同步。 2、链表的并发推理 3、粗粒度同步 粗粒度锁最大的优点就是显而易见的正确性。所有方法只有在获取锁后才能对链表进行操作，所以执行顺序必定是串行的。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class CoarseList&amp;lt;T&amp;gt; { private Node&amp;lt;T&amp;gt; head; private Lock lock = new ReentrantLock(); CoarseList() { head = new Node&amp;lt;&amp;gt;(Integer.</description>
    </item>
    
    <item>
      <title>读书笔记-The Art Of Multiprocessor Programing(一)</title>
      <link>https://fzyho.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-theartofmultiprocessorprograming%E4%B8%80/</link>
      <pubDate>Tue, 07 Apr 2020 23:11:47 +0800</pubDate>
      
      <guid>https://fzyho.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-theartofmultiprocessorprograming%E4%B8%80/</guid>
      <description>自旋锁与争用 1、测试-设置(Test-And-Set) 如下图所示，是两个无死锁互斥的自旋锁实现。理论上TASLock和TTASLock算法应该没什么不同。但是实际上随着线程数的增加，线程争用锁愈发频繁。TTASLock的性能会比TASLock好上许多。
class SpinLock implements Lock {AtomicBoolean state = new AtomicBoolean(false);// TASLock算法void lock() {while (state.getAndSet(true)) {}}// TTASLock算法void lock() {while (true) {while (state.get()) {};if (!state.getAndSet(true)) {return;}}}void unlock() {state.set(false);}} 原因在于state.getAndSet()语句本质上是总线上的一个广播(volatile原因)，因而会延迟所有线程(线程必须通过总线才能和内存通信，而每个时刻只能有一个处理器或存储控制器访问总线)。TTASLock的state.get()判断一直循环，没有往下走，即 所在的线程一直本地旋转，没有产生总线流量(bus traffic)。
本地旋转指线程反复地读取cache的值而不是访问总线。这一概念是设计高效自旋锁的一个重要的原则。
2、指数后退(Exponential Backoff) 当大量线程争用锁时(高争用)，那么纵然时TTASLock也会产生过多的总线流量——一个线程unlock后，会导致大量(甚至所有)争用的线程都去执行state.getAndSet()方法。因此可以通过backoff的方式回避这种情况。
class BackoffLock implements Lock {private AtomicBoolean state = new AtomicBoolean(false);private static final int MIN_DELAY = .</description>
    </item>
    
    <item>
      <title>JMockit</title>
      <link>https://fzyho.github.io/docs/jmockit/</link>
      <pubDate>Sun, 19 Jan 2020 21:04:11 +0900</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/</guid>
      <description>开发者在实现了需求功能或者完成了某个模块后，时常需要对模块整体功能或者某些关键逻辑进行单元测试(Unit Test)以验证程序运行是否符合预期。而在运行程序时，程序不可避免的可能需要调用第三方库、连接网络、数据库等，需要依赖许多不同的外部模块。但这些可能在开发过程中未真正接入或者不可用。这时就需要将我们的测试从实际的运行环境中隔离开来(Test Isolation)。而Jmockit则是为解决这类问题而诞生的。
Jmockit是一个对类或对象进行Mock的工具，它必须运行在JUnit或者TestNG框架中。
This is a JMockit User Guide. Since the official guide is a bit obscure, I transalate and rearrange the content of it and hope it could be clearer and more heplful for readers.</description>
    </item>
    
    <item>
      <title>MockUp</title>
      <link>https://fzyho.github.io/docs/jmockit/usage/mockup/</link>
      <pubDate>Sun, 19 Jan 2020 21:04:11 +0900</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/usage/mockup/</guid>
      <description>使用方式 MockUp的使用类似于@Mocked注解以及Expectations()的结合，但是更加直接和具体。MockUp常常需要搭配@Mock注解来使用：MockUp用于表明要Mock一个类，然后@Mock类似于@Override一般覆盖原有的方法。
MockUp可以用在类定义的时候：
1 class MockUpExample extends MockUp&amp;lt;Example&amp;gt; {...} 也可以当做是匿名类使用:
1 MockUp&amp;lt;Example&amp;gt;() {...} 当使用了MockUp构建的虚假类后(不论是定义好的类，还是测试方法内的内部类)时——比如new出对象——使用@Mock标注的方法就会替换掉对应的原本的方法，而没有被替换的就保持不变。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Test public void testMockUp() { MockUpThing thing = new MockUpThing(); Assert.assertSame(thing.doSomething(),&amp;#34;something&amp;#34;); new MockUp&amp;lt;MockUpThing&amp;gt;(MockUpThing.class) { @Mock String doSomething() { return &amp;#34;mock...&amp;#34;; } }; Assert.assertSame(thing.doSomething(), &amp;#34;mock...&amp;#34;); } private static class MockUpThing { String doSomething() { return &amp;#34;something&amp;#34;; } } @Mock使用范围 @Mock可以修饰final、static、native方法，不论是否方法的访问权限是否public。@Mock还可以用于修饰$init()、$cinit()来替换构造方法以及类初始化方法。显然$init()带入不同参数可以匹配不同的构造方法。而类初始化方法会替换包括所有static{.</description>
    </item>
    
    <item>
      <title>Mock注解</title>
      <link>https://fzyho.github.io/docs/jmockit/usage/mock%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Sun, 19 Jan 2020 21:04:11 +0900</pubDate>
      
      <guid>https://fzyho.github.io/docs/jmockit/usage/mock%E6%B3%A8%E8%A7%A3/</guid>
      <description>可对类或实例实现mock的注解有三种：@Mocked、@Injectable、@Capturing。通常，@Injectable是最常用的，@Mocked比较少用，@Capturing更少。如果要Mock类静态方法或其他一些行为，之后讲到的Mock、MockUp也许会更强大一些。
@Mocked注解 @Mocked用于修饰类，告诉Jmockit为该类生成一个Mocked对象。@Mocked注解会影响到该类的所有方法(包括静态方法)，但是仅限于该类自身，其往下的子类或者往上的父类的方法不会被Mocked。而Mocked的方法都会返回确定的默认值：
基础类型值(int、short、long等)返回0； String类型返回null； 引用类型则返回该类型的一个Mocked对象，并对其方法和字段递归Mocked下去。 由于@Mocked会影响到整个类，因此此注解使用起来并不灵活，用处不大，但是对于一些简单的只需要用到某个方法的返回结果而进行Mock的，使用@Mocked会直接简单许多。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public class MockedTest { @Mocked private LocalDate date1; @Mocked private IMockedThing thing; @Test public void testMocked(@Mocked LocalDate date2) { // @Mocked作用的两个字段 指向是不同的对象 Assert.assertNotSame(date1, date2); // date1对象或者new出来的对象的 getDayOfMonth() // 结果都为0，即@Mocked作用于类而不是实例对象 Assert.assertEquals(0, date1.</description>
    </item>
    
  </channel>
</rss>
